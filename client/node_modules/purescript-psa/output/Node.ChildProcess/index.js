// Generated by purs version 0.12.0

// | This module contains various types and functions to allow you to spawn and
// | interact with child processes.
// |
// | It is intended to be imported qualified, as follows:
// |
// | ```purescript
// | import Node.ChildProcess (ChildProcess, CHILD_PROCESS)
// | import Node.ChildProcess as ChildProcess
// | ```
// |
// | The [Node.js documentation](https://nodejs.org/api/child_process.html)
// | forms the basis for this module and has in-depth documentation about
// | runtime behaviour.
"use strict";
var $foreign = require("./foreign.js");
var Control_Alt = require("../Control.Alt/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Function_Uncurried = require("../Data.Function.Uncurried/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Nullable = require("../Data.Nullable/index.js");
var Data_Posix = require("../Data.Posix/index.js");
var Data_Posix_Signal = require("../Data.Posix.Signal/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Effect = require("../Effect/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Exception_Unsafe = require("../Effect.Exception.Unsafe/index.js");
var Foreign = require("../Foreign/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Node_Buffer = require("../Node.Buffer/index.js");
var Node_FS = require("../Node.FS/index.js");
var Node_Stream = require("../Node.Stream/index.js");
var Prelude = require("../Prelude/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

// | Behaviour for standard IO streams (eg, standard input, standard output) of
// | a child process.
// |
// | * `Pipe`: creates a pipe between the child and parent process, which can
// |   then be accessed as a `Stream` via the `stdin`, `stdout`, or `stderr`
// |   functions.
// | * `Ignore`: ignore this stream. This will cause Node to open /dev/null and
// |   connect it to the stream.
// | * `ShareStream`: Connect the supplied stream to the corresponding file
// |    descriptor in the child.
// | * `ShareFD`: Connect the supplied file descriptor (which should be open
// |   in the parent) to the corresponding file descriptor in the child.
var Pipe = (function () {
    function Pipe() {

    };
    Pipe.value = new Pipe();
    return Pipe;
})();

// | Behaviour for standard IO streams (eg, standard input, standard output) of
// | a child process.
// |
// | * `Pipe`: creates a pipe between the child and parent process, which can
// |   then be accessed as a `Stream` via the `stdin`, `stdout`, or `stderr`
// |   functions.
// | * `Ignore`: ignore this stream. This will cause Node to open /dev/null and
// |   connect it to the stream.
// | * `ShareStream`: Connect the supplied stream to the corresponding file
// |    descriptor in the child.
// | * `ShareFD`: Connect the supplied file descriptor (which should be open
// |   in the parent) to the corresponding file descriptor in the child.
var Ignore = (function () {
    function Ignore() {

    };
    Ignore.value = new Ignore();
    return Ignore;
})();

// | Behaviour for standard IO streams (eg, standard input, standard output) of
// | a child process.
// |
// | * `Pipe`: creates a pipe between the child and parent process, which can
// |   then be accessed as a `Stream` via the `stdin`, `stdout`, or `stderr`
// |   functions.
// | * `Ignore`: ignore this stream. This will cause Node to open /dev/null and
// |   connect it to the stream.
// | * `ShareStream`: Connect the supplied stream to the corresponding file
// |    descriptor in the child.
// | * `ShareFD`: Connect the supplied file descriptor (which should be open
// |   in the parent) to the corresponding file descriptor in the child.
var ShareStream = (function () {
    function ShareStream(value0) {
        this.value0 = value0;
    };
    ShareStream.create = function (value0) {
        return new ShareStream(value0);
    };
    return ShareStream;
})();

// | Behaviour for standard IO streams (eg, standard input, standard output) of
// | a child process.
// |
// | * `Pipe`: creates a pipe between the child and parent process, which can
// |   then be accessed as a `Stream` via the `stdin`, `stdout`, or `stderr`
// |   functions.
// | * `Ignore`: ignore this stream. This will cause Node to open /dev/null and
// |   connect it to the stream.
// | * `ShareStream`: Connect the supplied stream to the corresponding file
// |    descriptor in the child.
// | * `ShareFD`: Connect the supplied file descriptor (which should be open
// |   in the parent) to the corresponding file descriptor in the child.
var ShareFD = (function () {
    function ShareFD(value0) {
        this.value0 = value0;
    };
    ShareFD.create = function (value0) {
        return new ShareFD(value0);
    };
    return ShareFD;
})();

// | Specifies how a child process exited; normally (with an exit code), or
// | due to a signal.
var Normally = (function () {
    function Normally(value0) {
        this.value0 = value0;
    };
    Normally.create = function (value0) {
        return new Normally(value0);
    };
    return Normally;
})();

// | Specifies how a child process exited; normally (with an exit code), or
// | due to a signal.
var BySignal = (function () {
    function BySignal(value0) {
        this.value0 = value0;
    };
    BySignal.create = function (value0) {
        return new BySignal(value0);
    };
    return BySignal;
})();

// | Opaque type returned by `spawn`, `fork` and `exec`.
// | Needed as input for most methods in this module.
var ChildProcess = function (x) {
    return x;
};

// | Convert a ChildProcess.Error to a standard Error, which can then be thrown
// | inside an Effect or Aff computation (for example).
var toStandardError = Unsafe_Coerce.unsafeCoerce;
var toActualStdIOBehaviour = function (b) {
    if (b instanceof Pipe) {
        return "pipe";
    };
    if (b instanceof Ignore) {
        return "ignore";
    };
    if (b instanceof ShareFD) {
        return b.value0;
    };
    if (b instanceof ShareStream) {
        return b.value0;
    };
    throw new Error("Failed pattern match at Node.ChildProcess line 510, column 28 - line 514, column 33: " + [ b.constructor.name ]);
};
var toActualStdIOOptions = Data_Functor.map(Data_Functor.functorArray)(function ($29) {
    return Data_Nullable.toNullable(Data_Functor.map(Data_Maybe.functorMaybe)(toActualStdIOBehaviour)($29));
});

// | Spawn a child process. Note that, in the event that a child process could
// | not be spawned (for example, if the executable was not found) this will
// | not throw an error. Instead, the `ChildProcess` will be created anyway,
// | but it will immediately emit an 'error' event.
var spawn = function (cmd) {
    return function (args) {
        var convertOpts = function (opts) {
            return {
                cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
                stdio: toActualStdIOOptions(opts.stdio),
                env: Data_Nullable.toNullable(opts.env),
                detached: opts.detached,
                uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
                gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
            };
        };
        return function ($30) {
            return $foreign.spawnImpl(cmd)(args)(convertOpts($30));
        };
    };
};
var showExit = new Data_Show.Show(function (v) {
    if (v instanceof Normally) {
        return "Normally " + Data_Show.show(Data_Show.showInt)(v.value0);
    };
    if (v instanceof BySignal) {
        return "BySignal " + Data_Show.show(Data_Posix_Signal.showSignal)(v.value0);
    };
    throw new Error("Failed pattern match at Node.ChildProcess line 163, column 1 - line 163, column 31: " + [ v.constructor.name ]);
});
var runChildProcess = function (v) {
    return v;
};

// | Create pipes for each of the three standard IO streams.
var pipe = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ Pipe.value, Pipe.value, Pipe.value ]);

// | The process ID of a child process. Note that if the process has already
// | exited, another process may have taken the same ID, so be careful!
var pid = function ($31) {
    return (function (v) {
        return v.pid;
    })(runChildProcess($31));
};

// | Handle the `"message"` signal.
var onMessage = $foreign.mkOnMessage(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var mkExit = function (code) {
    return function (signal) {
        var fromSignal = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe)(function ($32) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(BySignal.create)(Data_Posix_Signal.fromString($32));
        });
        var fromCode = function ($33) {
            return Data_Functor.map(Data_Maybe.functorMaybe)(Normally.create)(Data_Nullable.toMaybe($33));
        };
        var v = Control_Alt.alt(Data_Maybe.altMaybe)(fromCode(code))(fromSignal(signal));
        if (v instanceof Data_Maybe.Just) {
            return v.value0;
        };
        if (v instanceof Data_Maybe.Nothing) {
            return Effect_Exception_Unsafe.unsafeThrow("Node.ChildProcess.mkExit: Invalid arguments");
        };
        throw new Error("Failed pattern match at Node.ChildProcess line 169, column 3 - line 172, column 3: " + [ v.constructor.name ]);
    };
};

// | Handle the `"close"` signal.
var onClose = $foreign.mkOnClose(mkExit);

// | Handle the `"exit"` signal.
var onExit = $foreign.mkOnExit(mkExit);
var mkEffect = Unsafe_Coerce.unsafeCoerce;

// | Send messages to the (`nodejs`) child process.
// |
// | See the [node documentation](https://nodejs.org/api/child_process.html#child_process_subprocess_send_message_sendhandle_options_callback)
// | for in-depth documentation.
var send = function (msg) {
    return function (handle) {
        return function (v) {
            return mkEffect(function (v1) {
                return v.send(msg, handle);
            });
        };
    };
};
var missingStream = function (str) {
    return "Node.ChildProcess: stream not available: " + (str + ("\x0aThis is probably " + ("because you passed something other than Pipe to the stdio option when " + "you spawned it.")));
};

// | The standard error stream of a child process. Note that this is only
// | available if the process was spawned with the stderr option set to "pipe".
var stderr = function ($34) {
    return $foreign.unsafeFromNullable(missingStream("stderr"))((function (v) {
        return v.stderr;
    })(runChildProcess($34)));
};

// | The standard input stream of a child process. Note that this is only
// | available if the process was spawned with the stdin option set to "pipe".
var stdin = function ($35) {
    return $foreign.unsafeFromNullable(missingStream("stdin"))((function (v) {
        return v.stdin;
    })(runChildProcess($35)));
};

// | The standard output stream of a child process. Note that this is only
// | available if the process was spawned with the stdout option set to "pipe".
var stdout = function ($36) {
    return $foreign.unsafeFromNullable(missingStream("stdout"))((function (v) {
        return v.stdout;
    })(runChildProcess($36)));
};

// | Send a signal to a child process. In the same way as the
// | [unix kill(2) system call](https://linux.die.net/man/2/kill),
// | sending a signal to a child process won't necessarily kill it.
// |
// | The resulting effects of this function depend on the process
// | and the signal. They can vary from system to system.
// | The child process might emit an `"error"` event if the signal
// | could not be delivered.
var kill = function (sig) {
    return function (v) {
        return mkEffect(function (v1) {
            return v.kill(Data_Posix_Signal.toString(sig));
        });
    };
};

// | Share `stdin` with `stdin`, `stdout` with `stdout`,
// | and `stderr` with `stderr`.
var inherit = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ new ShareStream($foreign.process.stdin), new ShareStream($foreign.process.stdout), new ShareStream($foreign.process.stderr) ]);

// | Ignore all streams.
var ignore = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ Ignore.value, Ignore.value, Ignore.value ]);

// | Closes the IPC channel between parent and child.
var disconnect = function ($37) {
    return (function (v) {
        return v.disconnect;
    })(runChildProcess($37));
};

// | A default set of `SpawnOptions`. Everything is set to `Nothing`,
// | `detached` is `false` and `stdio` is `ChildProcess.pipe`.
var defaultSpawnOptions = {
    cwd: Data_Maybe.Nothing.value,
    stdio: pipe,
    env: Data_Maybe.Nothing.value,
    detached: false,
    uid: Data_Maybe.Nothing.value,
    gid: Data_Maybe.Nothing.value
};
var defaultExecSyncOptions = {
    cwd: Data_Maybe.Nothing.value,
    input: Data_Maybe.Nothing.value,
    stdio: pipe,
    env: Data_Maybe.Nothing.value,
    timeout: Data_Maybe.Nothing.value,
    maxBuffer: Data_Maybe.Nothing.value,
    killSignal: Data_Maybe.Nothing.value,
    uid: Data_Maybe.Nothing.value,
    gid: Data_Maybe.Nothing.value
};

// | A default set of `ExecOptions`. Everything is set to `Nothing`.
var defaultExecOptions = {
    cwd: Data_Maybe.Nothing.value,
    env: Data_Maybe.Nothing.value,
    timeout: Data_Maybe.Nothing.value,
    maxBuffer: Data_Maybe.Nothing.value,
    killSignal: Data_Maybe.Nothing.value,
    uid: Data_Maybe.Nothing.value,
    gid: Data_Maybe.Nothing.value
};
var convertExecSyncOptions = function (opts) {
    return {
        cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
        input: Data_Maybe.fromMaybe($foreign["undefined"])(opts.input),
        stdio: toActualStdIOOptions(opts.stdio),
        env: Data_Maybe.fromMaybe($foreign["undefined"])(opts.env),
        timeout: Data_Maybe.fromMaybe($foreign["undefined"])(opts.timeout),
        maxBuffer: Data_Maybe.fromMaybe($foreign["undefined"])(opts.maxBuffer),
        killSignal: Data_Maybe.fromMaybe($foreign["undefined"])(opts.killSignal),
        uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
        gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
    };
};

// | Generally identical to `execFile`, with the exception that
// | the method will not return until the child process has fully closed.
// | Returns: The stdout from the command.
var execFileSync = function (cmd) {
    return function (args) {
        return function (opts) {
            return $foreign.execFileSyncImpl(cmd)(args)(convertExecSyncOptions(opts));
        };
    };
};

// | Generally identical to `exec`, with the exception that
// | the method will not return until the child process has fully closed.
// | Returns: The stdout from the command.
var execSync = function (cmd) {
    return function (opts) {
        return $foreign.execSyncImpl(cmd)(convertExecSyncOptions(opts));
    };
};
var convertExecOptions = function (opts) {
    return {
        cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
        env: Data_Maybe.fromMaybe($foreign["undefined"])(opts.env),
        timeout: Data_Maybe.fromMaybe($foreign["undefined"])(opts.timeout),
        maxBuffer: Data_Maybe.fromMaybe($foreign["undefined"])(opts.maxBuffer),
        killSignal: Data_Maybe.fromMaybe($foreign["undefined"])(opts.killSignal),
        uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
        gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
    };
};

// | Similar to `spawn`, except that this variant will:
// | * run the given command with the shell,
// | * buffer output, and wait until the process has exited before calling the
// |   callback.
// |
// | Note that the child process will be killed if the amount of output exceeds
// | a certain threshold (the default is defined by Node.js).
var exec = function (cmd) {
    return function (opts) {
        return function (callback) {
            return $foreign.execImpl(cmd)(convertExecOptions(opts))(function (err) {
                return function (stdout$prime) {
                    return function (stderr$prime) {
                        return callback({
                            error: Data_Nullable.toMaybe(err),
                            stdout: stdout$prime,
                            stderr: stderr$prime
                        });
                    };
                };
            });
        };
    };
};

// | Like `exec`, except instead of using a shell, it passes the arguments
// | directly to the specified command.
var execFile = function (cmd) {
    return function (args) {
        return function (opts) {
            return function (callback) {
                return $foreign.execFileImpl(cmd)(args)(convertExecOptions(opts))(function (err) {
                    return function (stdout$prime) {
                        return function (stderr$prime) {
                            return callback({
                                error: Data_Nullable.toMaybe(err),
                                stdout: stdout$prime,
                                stderr: stderr$prime
                            });
                        };
                    };
                });
            };
        };
    };
};

// | Indicates whether it is still possible to send and receive
// | messages from the child process.
var connected = function (v) {
    return mkEffect(function (v1) {
        return v.connected;
    });
};
module.exports = {
    stdin: stdin,
    stdout: stdout,
    stderr: stderr,
    pid: pid,
    connected: connected,
    kill: kill,
    send: send,
    disconnect: disconnect,
    toStandardError: toStandardError,
    Normally: Normally,
    BySignal: BySignal,
    onExit: onExit,
    onClose: onClose,
    onMessage: onMessage,
    spawn: spawn,
    defaultSpawnOptions: defaultSpawnOptions,
    exec: exec,
    execFile: execFile,
    defaultExecOptions: defaultExecOptions,
    execSync: execSync,
    execFileSync: execFileSync,
    defaultExecSyncOptions: defaultExecSyncOptions,
    Pipe: Pipe,
    Ignore: Ignore,
    ShareStream: ShareStream,
    ShareFD: ShareFD,
    pipe: pipe,
    inherit: inherit,
    ignore: ignore,
    showExit: showExit,
    onDisconnect: $foreign.onDisconnect,
    onError: $foreign.onError,
    fork: $foreign.fork
};
