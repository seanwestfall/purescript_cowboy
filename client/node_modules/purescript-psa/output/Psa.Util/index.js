// Generated by purs version 0.12.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_String = require("../Data.String/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Prelude = require("../Prelude/index.js");
var replicate = function (dictMonoid) {
    return function (n) {
        return function (m) {
            var go = function ($copy_i) {
                return function ($copy_x) {
                    var $tco_var_i = $copy_i;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(i, x) {
                        if (i <= 0) {
                            $tco_done = true;
                            return x;
                        };
                        if (Data_Boolean.otherwise) {
                            $tco_var_i = i - 1 | 0;
                            $copy_x = Data_Semigroup.append(dictMonoid.Semigroup0())(x)(m);
                            return;
                        };
                        throw new Error("Failed pattern match at Psa.Util line 10, column 3 - line 12, column 38: " + [ i.constructor.name, x.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_i, $copy_x);
                    };
                    return $tco_result;
                };
            };
            return go(n)(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var padRight = function (width) {
    return function (str) {
        return str + replicate(Data_Monoid.monoidString)(width - Data_String_CodePoints.length(str) | 0)(" ");
    };
};
var padLeft = function (width) {
    return function (str) {
        return replicate(Data_Monoid.monoidString)(width - Data_String_CodePoints.length(str) | 0)(" ") + str;
    };
};
var iter_ = function (dictFoldable) {
    return function (dictApplicative) {
        return function (xs) {
            return function (f) {
                var go = function (v) {
                    return function (b) {
                        return new Data_Tuple.Tuple(v.value0 + 1 | 0, Control_Apply.applyFirst(dictApplicative.Apply0())(v.value1)(f(v.value0)(b)));
                    };
                };
                return Data_Tuple.snd(Data_Foldable.foldl(dictFoldable)(go)(new Data_Tuple.Tuple(0, Control_Applicative.pure(dictApplicative)(Data_Unit.unit)))(xs));
            };
        };
    };
};
module.exports = {
    replicate: replicate,
    padLeft: padLeft,
    padRight: padRight,
    iter_: iter_
};
