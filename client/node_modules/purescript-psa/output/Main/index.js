// Generated by purs version 0.12.0
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode = require("../Data.Argonaut.Decode/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Argonaut_Encode = require("../Data.Argonaut.Encode/index.js");
var Data_Argonaut_Encode_Class = require("../Data.Argonaut.Encode.Class/index.js");
var Data_Argonaut_Parser = require("../Data.Argonaut.Parser/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_DateTime = require("../Data.DateTime/index.js");
var Data_DateTime_Instant = require("../Data.DateTime.Instant/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Posix_Signal = require("../Data.Posix.Signal/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String = require("../Data.String/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Pattern = require("../Data.String.Pattern/index.js");
var Data_Traversable = require("../Data.Traversable/index.js");
var Effect = require("../Effect/index.js");
var Effect_Console = require("../Effect.Console/index.js");
var Effect_Exception = require("../Effect.Exception/index.js");
var Effect_Now = require("../Effect.Now/index.js");
var Effect_Ref = require("../Effect.Ref/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Node_ChildProcess = require("../Node.ChildProcess/index.js");
var Node_Encoding = require("../Node.Encoding/index.js");
var Node_FS_Stats = require("../Node.FS.Stats/index.js");
var Node_FS_Sync = require("../Node.FS.Sync/index.js");
var Node_Path = require("../Node.Path/index.js");
var Node_Platform = require("../Node.Platform/index.js");
var Node_Process = require("../Node.Process/index.js");
var Node_Stream = require("../Node.Stream/index.js");
var Partial_Unsafe = require("../Partial.Unsafe/index.js");
var Prelude = require("../Prelude/index.js");
var Psa = require("../Psa/index.js");
var Psa_Output = require("../Psa.Output/index.js");
var Psa_Printer_Default = require("../Psa.Printer.Default/index.js");
var Psa_Printer_Json = require("../Psa.Printer.Json/index.js");
var Psa_Types = require("../Psa.Types/index.js");
var usage = "psa - Error/Warning reporting frontend for 'purs compile'\x0a\x0aUsage: psa [--censor-lib] [--censor-src]\x0a           [--censor-codes=CODES] [--filter-codes=CODES]\x0a           [--no-colors] [--no-source]\x0a           [--is-lib=DIR] [--purs=PURS] [--stash]\x0a           PSC_OPTIONS\x0a\x0aAvailable options:\x0a  -v,--version           Show the version number\x0a  -h,--help              Show this help text\x0a  --verbose-stats        Show counts for each warning type\x0a  --censor-stats         Censor warning/error summary\x0a  --censor-warnings      Censor all warnings\x0a  --censor-lib           Censor warnings from library sources\x0a  --censor-src           Censor warnings from project sources\x0a  --censor-codes=CODES   Censor specific error codes\x0a  --filter-codes=CODES   Only show specific error codes\x0a  --no-colors            Disable ANSI colors\x0a  --no-source            Disable original source code printing\x0a  --strict               Promotes src warnings to errors\x0a  --stash                Enable persistent warnings (defaults to .psa-stash)\x0a  --stash=FILE           Enable persistent warnings using a specific stash file\x0a  --is-lib=DIR           Distinguishing library path (defaults to 'bower_components')\x0a  --purs=PURS            Name of purs executable (defaults to 'purs')\x0a\x0a  CODES                  Comma-separated list of purs error codes\x0a  PSC_OPTIONS            Any extra options are passed to 'purs compile'\x0a";
var parseOptions = function (opts) {
    return function (args) {
        var isPrefix = function (s) {
            return function (str) {
                var v = Data_String_CodePoints.indexOf(s)(str);
                if (v instanceof Data_Maybe.Just && v.value0 === 0) {
                    return true;
                };
                return false;
            };
        };
        var parse = function (p) {
            return function (arg) {
                if (arg === "--version" || arg === "-v") {
                    return Control_Apply.applySecond(Effect.applyEffect)(Effect_Console.log($foreign.version))(Node_Process.exit(0));
                };
                if (arg === "--help" || arg === "-h") {
                    return Control_Apply.applySecond(Effect.applyEffect)(Effect_Console.log(usage))(Node_Process.exit(0));
                };
                if (arg === "--stash") {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        stash: true,
                        jsonErrors: p.jsonErrors,
                        showSource: p.showSource,
                        opts: p.opts,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (arg === "--json-errors") {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        jsonErrors: true,
                        stash: p.stash,
                        showSource: p.showSource,
                        opts: p.opts,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (arg === "--no-source") {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        showSource: false,
                        jsonErrors: p.jsonErrors,
                        stash: p.stash,
                        opts: p.opts,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (arg === "--no-colors" || arg === "--monochrome") {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        opts: {
                            ansi: false,
                            statVerbosity: p.opts.statVerbosity,
                            strict: p.opts.strict,
                            censorWarnings: p.opts.censorWarnings,
                            censorLib: p.opts.censorLib,
                            censorSrc: p.opts.censorSrc,
                            censorCodes: p.opts.censorCodes,
                            filterCodes: p.opts.filterCodes,
                            libDirs: p.opts.libDirs,
                            cwd: p.opts.cwd
                        },
                        jsonErrors: p.jsonErrors,
                        showSource: p.showSource,
                        stash: p.stash,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (arg === "--verbose-stats") {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        opts: {
                            statVerbosity: Psa_Types.VerboseStats.value,
                            ansi: p.opts.ansi,
                            strict: p.opts.strict,
                            censorWarnings: p.opts.censorWarnings,
                            censorLib: p.opts.censorLib,
                            censorSrc: p.opts.censorSrc,
                            censorCodes: p.opts.censorCodes,
                            filterCodes: p.opts.filterCodes,
                            libDirs: p.opts.libDirs,
                            cwd: p.opts.cwd
                        },
                        jsonErrors: p.jsonErrors,
                        showSource: p.showSource,
                        stash: p.stash,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (arg === "--censor-stats") {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        opts: {
                            statVerbosity: Psa_Types.NoStats.value,
                            ansi: p.opts.ansi,
                            strict: p.opts.strict,
                            censorWarnings: p.opts.censorWarnings,
                            censorLib: p.opts.censorLib,
                            censorSrc: p.opts.censorSrc,
                            censorCodes: p.opts.censorCodes,
                            filterCodes: p.opts.filterCodes,
                            libDirs: p.opts.libDirs,
                            cwd: p.opts.cwd
                        },
                        jsonErrors: p.jsonErrors,
                        showSource: p.showSource,
                        stash: p.stash,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (arg === "--strict") {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        opts: {
                            strict: true,
                            ansi: p.opts.ansi,
                            statVerbosity: p.opts.statVerbosity,
                            censorWarnings: p.opts.censorWarnings,
                            censorLib: p.opts.censorLib,
                            censorSrc: p.opts.censorSrc,
                            censorCodes: p.opts.censorCodes,
                            filterCodes: p.opts.filterCodes,
                            libDirs: p.opts.libDirs,
                            cwd: p.opts.cwd
                        },
                        jsonErrors: p.jsonErrors,
                        showSource: p.showSource,
                        stash: p.stash,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (arg === "--censor-warnings") {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        opts: {
                            censorWarnings: true,
                            ansi: p.opts.ansi,
                            statVerbosity: p.opts.statVerbosity,
                            strict: p.opts.strict,
                            censorLib: p.opts.censorLib,
                            censorSrc: p.opts.censorSrc,
                            censorCodes: p.opts.censorCodes,
                            filterCodes: p.opts.filterCodes,
                            libDirs: p.opts.libDirs,
                            cwd: p.opts.cwd
                        },
                        jsonErrors: p.jsonErrors,
                        showSource: p.showSource,
                        stash: p.stash,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (arg === "--censor-lib") {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        opts: {
                            censorLib: true,
                            ansi: p.opts.ansi,
                            censorWarnings: p.opts.censorWarnings,
                            statVerbosity: p.opts.statVerbosity,
                            strict: p.opts.strict,
                            censorSrc: p.opts.censorSrc,
                            censorCodes: p.opts.censorCodes,
                            filterCodes: p.opts.filterCodes,
                            libDirs: p.opts.libDirs,
                            cwd: p.opts.cwd
                        },
                        jsonErrors: p.jsonErrors,
                        showSource: p.showSource,
                        stash: p.stash,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (arg === "--censor-src") {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        opts: {
                            censorSrc: true,
                            ansi: p.opts.ansi,
                            censorLib: p.opts.censorLib,
                            censorWarnings: p.opts.censorWarnings,
                            statVerbosity: p.opts.statVerbosity,
                            strict: p.opts.strict,
                            censorCodes: p.opts.censorCodes,
                            filterCodes: p.opts.filterCodes,
                            libDirs: p.opts.libDirs,
                            cwd: p.opts.cwd
                        },
                        jsonErrors: p.jsonErrors,
                        showSource: p.showSource,
                        stash: p.stash,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (isPrefix("--censor-codes=")(arg)) {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        opts: {
                            censorCodes: Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Set.insert(Data_Ord.ordString))(p.opts.censorCodes)(Data_String_Common.split(",")(Data_String_CodePoints.drop(15)(arg))),
                            ansi: p.opts.ansi,
                            censorLib: p.opts.censorLib,
                            censorSrc: p.opts.censorSrc,
                            censorWarnings: p.opts.censorWarnings,
                            statVerbosity: p.opts.statVerbosity,
                            strict: p.opts.strict,
                            filterCodes: p.opts.filterCodes,
                            libDirs: p.opts.libDirs,
                            cwd: p.opts.cwd
                        },
                        jsonErrors: p.jsonErrors,
                        showSource: p.showSource,
                        stash: p.stash,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (isPrefix("--filter-codes=")(arg)) {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        opts: {
                            filterCodes: Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Set.insert(Data_Ord.ordString))(p.opts.filterCodes)(Data_String_Common.split(",")(Data_String_CodePoints.drop(15)(arg))),
                            ansi: p.opts.ansi,
                            censorCodes: p.opts.censorCodes,
                            censorLib: p.opts.censorLib,
                            censorSrc: p.opts.censorSrc,
                            censorWarnings: p.opts.censorWarnings,
                            statVerbosity: p.opts.statVerbosity,
                            strict: p.opts.strict,
                            libDirs: p.opts.libDirs,
                            cwd: p.opts.cwd
                        },
                        jsonErrors: p.jsonErrors,
                        showSource: p.showSource,
                        stash: p.stash,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (isPrefix("--is-lib=")(arg)) {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        opts: {
                            libDirs: Data_Array.snoc(p.opts.libDirs)(Data_String_CodePoints.drop(9)(arg)),
                            ansi: p.opts.ansi,
                            censorCodes: p.opts.censorCodes,
                            censorLib: p.opts.censorLib,
                            censorSrc: p.opts.censorSrc,
                            censorWarnings: p.opts.censorWarnings,
                            filterCodes: p.opts.filterCodes,
                            statVerbosity: p.opts.statVerbosity,
                            strict: p.opts.strict,
                            cwd: p.opts.cwd
                        },
                        jsonErrors: p.jsonErrors,
                        showSource: p.showSource,
                        stash: p.stash,
                        purs: p.purs,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (isPrefix("--purs=")(arg)) {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        purs: Data_String_CodePoints.drop(7)(arg),
                        jsonErrors: p.jsonErrors,
                        opts: p.opts,
                        showSource: p.showSource,
                        stash: p.stash,
                        stashFile: p.stashFile,
                        extra: p.extra
                    });
                };
                if (isPrefix("--stash=")(arg)) {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        stash: true,
                        stashFile: Data_String_CodePoints.drop(8)(arg),
                        jsonErrors: p.jsonErrors,
                        opts: p.opts,
                        purs: p.purs,
                        showSource: p.showSource,
                        extra: p.extra
                    });
                };
                if (Data_Boolean.otherwise) {
                    return Control_Applicative.pure(Effect.applicativeEffect)({
                        extra: Data_Array.snoc(p.extra)(arg),
                        jsonErrors: p.jsonErrors,
                        opts: p.opts,
                        purs: p.purs,
                        showSource: p.showSource,
                        stash: p.stash,
                        stashFile: p.stashFile
                    });
                };
                throw new Error("Failed pattern match at Main line 80, column 3 - line 132, column 60: " + [ p.constructor.name, arg.constructor.name ]);
            };
        };
        var defaultLibDir = function (x) {
            if (Data_Array.length(x.opts.libDirs) === 0) {
                return {
                    opts: {
                        libDirs: [ "bower_components" ],
                        ansi: x.opts.ansi,
                        censorCodes: x.opts.censorCodes,
                        censorLib: x.opts.censorLib,
                        censorSrc: x.opts.censorSrc,
                        censorWarnings: x.opts.censorWarnings,
                        cwd: x.opts.cwd,
                        filterCodes: x.opts.filterCodes,
                        statVerbosity: x.opts.statVerbosity,
                        strict: x.opts.strict
                    },
                    extra: x.extra,
                    jsonErrors: x.jsonErrors,
                    purs: x.purs,
                    showSource: x.showSource,
                    stash: x.stash,
                    stashFile: x.stashFile
                };
            };
            if (Data_Boolean.otherwise) {
                return x;
            };
            throw new Error("Failed pattern match at Main line 139, column 3 - line 142, column 20: " + [ x.constructor.name ]);
        };
        return Data_Functor.map(Effect.functorEffect)(defaultLibDir)(Data_Array.foldM(Effect.monadEffect)(parse)({
            extra: [  ],
            purs: "purs",
            showSource: true,
            stash: false,
            stashFile: ".psa-stash",
            jsonErrors: false,
            opts: opts
        })(args));
    };
};
var defaultOptions = {
    ansi: true,
    censorWarnings: false,
    censorLib: false,
    censorSrc: false,
    censorCodes: Data_Set.empty,
    filterCodes: Data_Set.empty,
    statVerbosity: Psa_Types.CompactStats.value,
    libDirs: [  ],
    strict: false,
    cwd: ""
};
var main = (function () {
    var stdio = [ new Data_Maybe.Just(Node_ChildProcess.Pipe.value), Node_ChildProcess["inherit"][1], new Data_Maybe.Just(Node_ChildProcess.Pipe.value) ];
    var spawn$prime = function (cmd) {
        return function (args) {
            return function (onExit) {
                return function __do() {
                    var v = Node_ChildProcess.spawn(cmd)(args)({
                        cwd: Node_ChildProcess.defaultSpawnOptions.cwd,
                        stdio: stdio,
                        env: Node_ChildProcess.defaultSpawnOptions.env,
                        detached: Node_ChildProcess.defaultSpawnOptions.detached,
                        uid: Node_ChildProcess.defaultSpawnOptions.uid,
                        gid: Node_ChildProcess.defaultSpawnOptions.gid
                    })();
                    var v1 = Effect_Ref["new"]("")();
                    Node_Stream.onDataString(Node_ChildProcess.stderr(v))(Node_Encoding.UTF8.value)(function (chunk) {
                        return Effect_Ref.modify_(function (v2) {
                            return v2 + chunk;
                        })(v1);
                    })();
                    Node_ChildProcess.onExit(v)(function (status) {
                        if (status instanceof Node_ChildProcess.Normally) {
                            return function __do() {
                                Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(v1))(onExit)();
                                return Node_Process.exit(status.value0)();
                            };
                        };
                        if (status instanceof Node_ChildProcess.BySignal) {
                            return function __do() {
                                Effect_Console.error(Data_Show.show(Data_Posix_Signal.showSignal)(status.value0))();
                                return Node_Process.exit(1)();
                            };
                        };
                        throw new Error("Failed pattern match at Main line 197, column 7 - line 204, column 5: " + [ status.constructor.name ]);
                    })();
                    return Node_ChildProcess.onError(v)(retryWithCmd(cmd)(args)(onExit))();
                };
            };
        };
    };
    var retryWithCmd = function (cmd) {
        return function (args) {
            return function (onExit) {
                return function (err) {
                    if (err.code === "ENOENT") {
                        var $78 = Data_Eq.eq(Data_Maybe.eqMaybe(Node_Platform.eqPlatform))(Node_Process.platform)(new Data_Maybe.Just(Node_Platform.Win32.value));
                        if ($78) {
                            var v = Data_String_CodeUnits.stripSuffix(".cmd")(cmd);
                            if (v instanceof Data_Maybe.Nothing) {
                                return spawn$prime(cmd + ".cmd")(args)(onExit);
                            };
                            if (v instanceof Data_Maybe.Just) {
                                return Effect_Exception["throw"]("`" + (v.value0 + ("` executable not found. (nor `" + (cmd + "`)"))));
                            };
                            throw new Error("Failed pattern match at Main line 211, column 10 - line 214, column 8: " + [ v.constructor.name ]);
                        };
                        return Effect_Exception["throw"]("`" + (cmd + "` executable not found."));
                    };
                    if (Data_Boolean.otherwise) {
                        return Effect_Exception.throwException(Node_ChildProcess.toStandardError(err));
                    };
                    throw new Error("Failed pattern match at Main line 206, column 3 - line 217, column 50: " + [ cmd.constructor.name, args.constructor.name, onExit.constructor.name, err.constructor.name ]);
                };
            };
        };
    };
    var mergeWarnings = function (filenames) {
        return function (date) {
            return function (old) {
                return function ($$new) {
                    return function __do() {
                        var v = Effect_Ref["new"](Foreign_Object.empty)();
                        var v1 = Data_Function.flip(Data_Array.filterA(Effect.applicativeEffect))(old)(function (x) {
                            if (x.filename instanceof Data_Maybe.Nothing) {
                                return Control_Applicative.pure(Effect.applicativeEffect)(false);
                            };
                            if (x.filename instanceof Data_Maybe.Just) {
                                var $83 = Data_Set.member(Data_Ord.ordString)(x.filename.value0)(filenames);
                                if ($83) {
                                    return Control_Applicative.pure(Effect.applicativeEffect)(false);
                                };
                                return function __do() {
                                    var v1 = Data_Functor.map(Effect.functorEffect)(Foreign_Object.lookup(x.filename.value0))(Effect_Ref.read(v))();
                                    if (v1 instanceof Data_Maybe.Just) {
                                        return v1.value0;
                                    };
                                    if (v1 instanceof Data_Maybe.Nothing) {
                                        var v2 = Effect_Exception.catchException(function (v2) {
                                            return Control_Applicative.pure(Effect.applicativeEffect)(false);
                                        })(Data_Functor.map(Effect.functorEffect)(function ($125) {
                                            return (function (v2) {
                                                return Data_Ord.greaterThan(Data_DateTime.ordDateTime)(date)(v2);
                                            })(Node_FS_Stats.modifiedTime($125));
                                        })(Node_FS_Sync.stat(x.filename.value0)))();
                                        var v3 = Effect_Ref.modify_(Foreign_Object.insert(x.filename.value0)(v2))(v)();
                                        return v2;
                                    };
                                    throw new Error("Failed pattern match at Main line 266, column 15 - line 272, column 25: " + [ v1.constructor.name ]);
                                };
                            };
                            throw new Error("Failed pattern match at Main line 259, column 7 - line 272, column 25: " + [ x.filename.constructor.name ]);
                        })();
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1)($$new);
                    };
                };
            };
        };
    };
    var loadNothing = function (v) {
        return function (v1) {
            return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
        };
    };
    var isEmptySpan = function (filename) {
        return function (pos) {
            return filename === "" || pos.startLine === 0 && (pos.endLine === 0 && (pos.startColumn === 0 && pos.endColumn === 0));
        };
    };
    var loadLines = function (files) {
        return function (filename) {
            return function (pos) {
                if (isEmptySpan(filename)(pos)) {
                    return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
                };
                if (Data_Boolean.otherwise) {
                    return Effect_Exception.catchException(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value)))(function __do() {
                        var v = Data_Functor.map(Effect.functorEffect)(Foreign_Object.lookup(filename))(Effect_Ref.read(files))();
                        var v1 = (function () {
                            if (v instanceof Data_Maybe.Just) {
                                return v.value0;
                            };
                            if (v instanceof Data_Maybe.Nothing) {
                                var v1 = Data_Functor.map(Effect.functorEffect)(Data_String_Common.split("\x0a"))(Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(filename))();
                                Effect_Ref.modify_(Foreign_Object.insert(filename)(v1))(files)();
                                return v1;
                            };
                            throw new Error("Failed pattern match at Main line 230, column 11 - line 235, column 25: " + [ v.constructor.name ]);
                        })();
                        var source = Data_Array.slice(pos.startLine - 1 | 0)(pos.endLine)(v1);
                        return new Data_Maybe.Just(source);
                    });
                };
                throw new Error("Failed pattern match at Main line 225, column 3 - line 237, column 27: " + [ files.constructor.name, filename.constructor.name, pos.constructor.name ]);
            };
        };
    };
    var insertFilenames = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (x) {
        return function (s) {
            return Data_Maybe.maybe(s)(Data_Function.flip(Data_Set.insert(Data_Ord.ordString))(s))(x.filename);
        };
    });
    var encodeStash = function (s) {
        return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJson))(Data_Functor.map(Data_Functor.functorArray)(Psa_Types.encodePsaError)(s));
    };
    var writeStashFile = function (stashFile) {
        return function (warnings) {
            var file = Data_Argonaut_Core.stringify(encodeStash(warnings));
            return Node_FS_Sync.writeTextFile(Node_Encoding.UTF8.value)(stashFile)(file);
        };
    };
    var emptyStash = Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(function (v) {
        return {
            date: v,
            stash: [  ]
        };
    })(Data_DateTime_Instant.toDateTime))(Effect_Now.now);
    var decodeStash = function (s) {
        return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(s))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeArray(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson)))))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Psa_Types.parsePsaError));
    };
    var readStashFile = function (stashFile) {
        return Effect_Exception.catchException(Data_Function["const"](emptyStash))(function __do() {
            var v = Node_FS_Sync.stat(stashFile)();
            var v1 = Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(stashFile)();
            var v2 = decodeStash(v1);
            if (v2 instanceof Data_Either.Left) {
                return emptyStash();
            };
            if (v2 instanceof Data_Either.Right) {
                return {
                    date: Node_FS_Stats.modifiedTime(v),
                    stash: v2.value0
                };
            };
            throw new Error("Failed pattern match at Main line 248, column 5 - line 250, column 67: " + [ v2.constructor.name ]);
        });
    };
    return Data_Functor["void"](Effect.functorEffect)(function __do() {
        var v = Node_Process.cwd();
        var v1 = Data_Functor.map(Effect.functorEffect)(Data_Array.drop(2))(Node_Process.argv)();
        var v2 = parseOptions({
            ansi: defaultOptions.ansi,
            censorWarnings: defaultOptions.censorWarnings,
            censorLib: defaultOptions.censorLib,
            censorSrc: defaultOptions.censorSrc,
            censorCodes: defaultOptions.censorCodes,
            filterCodes: defaultOptions.filterCodes,
            statVerbosity: defaultOptions.statVerbosity,
            libDirs: defaultOptions.libDirs,
            strict: defaultOptions.strict,
            cwd: v
        })(v1)();
        var v3 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(function ($126) {
            return Data_Functor.map(Effect.functorEffect)(function (v3) {
                return v3 + Node_Path.sep;
            })(Node_Path.resolve([ v ])($126));
        })(v2.opts.libDirs)();
        var opts$prime = {
            libDirs: v3,
            ansi: v2.opts.ansi,
            censorCodes: v2.opts.censorCodes,
            censorLib: v2.opts.censorLib,
            censorSrc: v2.opts.censorSrc,
            censorWarnings: v2.opts.censorWarnings,
            cwd: v2.opts.cwd,
            filterCodes: v2.opts.filterCodes,
            statVerbosity: v2.opts.statVerbosity,
            strict: v2.opts.strict
        };
        var args = Data_Array.cons("compile")(Data_Array.cons("--json-errors")(v2.extra));
        var v4 = (function () {
            if (v2.stash) {
                return readStashFile(v2.stashFile)();
            };
            return emptyStash();
        })();
        return spawn$prime(v2.purs)(args)(function (buffer) {
            var stderr = Data_String_Common.split("\x0a")(buffer);
            return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(stderr)(function (err) {
                var v5 = Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(err))(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeForeignObject(Data_Argonaut_Decode_Class.decodeJsonJson))))(Psa_Types.parsePsaResult);
                if (v5 instanceof Data_Either.Left) {
                    return Effect_Console.error(err);
                };
                if (v5 instanceof Data_Either.Right) {
                    return function __do() {
                        var v6 = Effect_Ref["new"](Foreign_Object.empty)();
                        var loadLinesImpl = (function () {
                            if (v2.showSource) {
                                return loadLines(v6);
                            };
                            return loadNothing;
                        })();
                        var filenames = insertFilenames(insertFilenames(Data_Set.empty)(v5.value0.errors))(v5.value0.warnings);
                        var v7 = mergeWarnings(filenames)(v4.date)(v4.stash)(v5.value0.warnings)();
                        Control_Applicative.when(Effect.applicativeEffect)(v2.stash)(writeStashFile(v2.stashFile)(v7))();
                        var v8 = Psa_Output.output(Effect.monadEffect)(loadLinesImpl)(opts$prime)({
                            warnings: v7,
                            errors: v5.value0.errors
                        })();
                        (function () {
                            if (v2.jsonErrors) {
                                return Psa_Printer_Json.print(v8)();
                            };
                            return Psa_Printer_Default.print(opts$prime)(v8)();
                        })();
                        var $116 = Foreign_Object.isEmpty(v8.stats.allErrors);
                        if ($116) {
                            return Node_Process.exit(0)();
                        };
                        return Node_Process.exit(1)();
                    };
                };
                throw new Error("Failed pattern match at Main line 170, column 7 - line 186, column 3: " + [ v5.constructor.name ]);
            });
        })();
    });
})();
module.exports = {
    defaultOptions: defaultOptions,
    parseOptions: parseOptions,
    main: main,
    usage: usage,
    version: $foreign.version
};
