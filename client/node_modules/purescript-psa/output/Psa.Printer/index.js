// Generated by purs version 0.12.0
"use strict";
var Ansi_Codes = require("../Ansi.Codes/index.js");
var Ansi_Output = require("../Ansi.Output/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_List_NonEmpty = require("../Data.List.NonEmpty/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String = require("../Data.String/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Prelude = require("../Prelude/index.js");
var Psa_Types = require("../Psa.Types/index.js");
var Psa_Util = require("../Psa.Util/index.js");
var Line = (function () {
    function Line(value0) {
        this.value0 = value0;
    };
    Line.create = function (value0) {
        return new Line(value0);
    };
    return Line;
})();
var Indent = (function () {
    function Indent(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Indent.create = function (value0) {
        return function (value1) {
            return new Indent(value0, value1);
        };
    };
    return Indent;
})();
var Para = (function () {
    function Para(value0) {
        this.value0 = value0;
    };
    Para.create = function (value0) {
        return new Para(value0);
    };
    return Para;
})();
var Plain = (function () {
    function Plain(value0) {
        this.value0 = value0;
    };
    Plain.create = function (value0) {
        return new Plain(value0);
    };
    return Plain;
})();
var Style = (function () {
    function Style(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Style.create = function (value0) {
        return function (value1) {
            return new Style(value0, value1);
        };
    };
    return Style;
})();
var style = Style.create;
var semigroupRow = new Data_Semigroup.Semigroup(function (v) {
    return function (v1) {
        if (v instanceof Line && v1 instanceof Para) {
            return new Para(Data_Array.cons(v)(v1.value0));
        };
        if (v instanceof Indent && v1 instanceof Para) {
            return new Para(Data_Array.cons(v)(v1.value0));
        };
        if (v instanceof Para && v1 instanceof Line) {
            return new Para(Data_Array.snoc(v.value0)(v1));
        };
        if (v instanceof Para && v1 instanceof Indent) {
            return new Para(Data_Array.snoc(v.value0)(v1));
        };
        if (v instanceof Para && v1 instanceof Para) {
            return new Para(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0));
        };
        return new Para([ v, v1 ]);
    };
});
var renderRow = function (f) {
    var go = function (ind) {
        return function (v) {
            if (v instanceof Line) {
                return ind + f(v.value0);
            };
            if (v instanceof Para) {
                return Data_String_Common.joinWith("\x0a")(Data_Functor.map(Data_Functor.functorArray)(go(ind))(v.value0));
            };
            if (v instanceof Indent) {
                return go(ind + f(v.value0))(v.value1);
            };
            throw new Error("Failed pattern match at Psa.Printer line 75, column 3 - line 75, column 36: " + [ ind.constructor.name, v.constructor.name ]);
        };
    };
    return go("");
};
var renderAnsi = function (v) {
    return function (v1) {
        if (!v && v1 instanceof Plain) {
            return v1.value0;
        };
        if (!v && v1 instanceof Style) {
            return v1.value1;
        };
        if (v && v1 instanceof Plain) {
            return v1.value0;
        };
        if (v && v1 instanceof Style) {
            return Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(v1.value0)) + (v1.value1 + Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(Data_List_NonEmpty.singleton(Ansi_Codes.Reset.value))));
        };
        throw new Error("Failed pattern match at Psa.Printer line 79, column 1 - line 79, column 44: " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var render = function (ansi) {
    return renderRow(function ($41) {
        return Data_String_Common.joinWith("")(Data_Functor.map(Data_Functor.functorArray)(renderAnsi(ansi))($41));
    });
};
var plain = Plain.create;
var renderErrorRange = function (start) {
    return function (len) {
        return [ plain(Psa_Util.replicate(Data_Monoid.monoidString)(start - 1 | 0)(" ")), style(Ansi_Output.foreground(Ansi_Codes.Red.value))(Psa_Util.replicate(Data_Monoid.monoidString)(len)("^")) ];
    };
};
var renderErrorTick = function (start) {
    return function ($$char) {
        return [ plain(Psa_Util.replicate(Data_Monoid.monoidString)(start - 1 | 0)(" ")), style(Ansi_Output.foreground(Ansi_Codes.Red.value))($$char) ];
    };
};
var sourceLine = function (gutter) {
    return function (sep) {
        return function (num) {
            return function (code) {
                return [ style(Ansi_Output.dim)(Psa_Util.padLeft(gutter)(Data_Show.show(Data_Show.showInt)(num)) + sep), plain(code) ];
            };
        };
    };
};
var para = Para.create;
var monoidRow = new Data_Monoid.Monoid(function () {
    return semigroupRow;
}, new Para([  ]));
var line = Line.create;
var renderAnnotation = function (offset) {
    return function (pos) {
        return function (lines) {
            return para((function () {
                if (lines.length === 1) {
                    return [ line(lines[0]), line(renderErrorRange(pos.startColumn + offset | 0)(pos.endColumn - pos.startColumn | 0)) ];
                };
                return [ line(renderErrorTick(pos.startColumn + offset | 0)("v")), para(Data_Functor.map(Data_Functor.functorArray)(line)(lines)), line(renderErrorTick((pos.endColumn + offset | 0) - 1 | 0)("^")) ];
            })());
        };
    };
};
var renderSource = function (pos) {
    return function (lines) {
        var lineNums = Data_Array.range(pos.startLine)(pos.endLine);
        var gutter = Data_String_CodePoints.length(Data_Show.show(Data_Show.showInt)(pos.endLine));
        var source = Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.uncurry(sourceLine(gutter)("  ")))(Data_Array.zip(lineNums)(lines));
        var source$prime = (function () {
            var $36 = Data_Array.length(source) > 7;
            if ($36) {
                return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.take(3)(source))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ [ plain(Psa_Util.replicate(Data_Monoid.monoidString)(gutter + 2 | 0)(" ")), style(Ansi_Output.dim)("...") ] ])(Data_Array.drop(Data_Array.length(source) - 3 | 0)(source)));
            };
            return source;
        })();
        return renderAnnotation(gutter + 2 | 0)(pos)(source$prime);
    };
};
var indent = Indent.create;
var ansiLength = function (v) {
    if (v instanceof Plain) {
        return Data_String_CodePoints.length(v.value0);
    };
    if (v instanceof Style) {
        return Data_String_CodePoints.length(v.value1);
    };
    throw new Error("Failed pattern match at Psa.Printer line 66, column 1 - line 66, column 30: " + [ v.constructor.name ]);
};
module.exports = {
    line: line,
    indent: indent,
    para: para,
    plain: plain,
    style: style,
    ansiLength: ansiLength,
    render: render,
    renderRow: renderRow,
    renderAnsi: renderAnsi,
    renderSource: renderSource,
    semigroupRow: semigroupRow,
    monoidRow: monoidRow
};
