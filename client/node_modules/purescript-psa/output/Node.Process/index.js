// Generated by purs version 0.12.0

// | Bindings to the global `process` object in Node.js. See also [the Node API documentation](https://nodejs.org/api/process.html)
"use strict";
var $foreign = require("./foreign.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Posix = require("../Data.Posix/index.js");
var Data_Posix_Signal = require("../Data.Posix.Signal/index.js");
var Effect = require("../Effect/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Node_Platform = require("../Node.Platform/index.js");
var Node_Stream = require("../Node.Stream/index.js");
var Prelude = require("../Prelude/index.js");
var Unsafe_Coerce = require("../Unsafe.Coerce/index.js");

// | Get the Node.js version.
var version = $foreign.process.version;

// | Check whether the standard output stream appears to be attached to a TTY.
// | It is a good idea to check this before printing ANSI codes to stdout
// | (e.g. for coloured text in the terminal).
var stdoutIsTTY = $foreign.process.stdout.isTTY;

// | The standard output stream. Note that this stream cannot be closed; calling
// | `end` will result in an exception being thrown.
var stdout = $foreign.process.stdout;

// | The standard input stream. Note that this stream will never emit an `end`
// | event, so any handlers attached via `onEnd` will never be called.
var stdin = $foreign.process.stdin;

// | Check whether the standard error stream appears to be attached to a TTY.
// | It is a good idea to check this before printing ANSI codes to stderr
// | (e.g. for coloured text in the terminal).
var stderrIsTTY = $foreign.process.stderr.isTTY;

// | The standard error stream. Note that this stream cannot be closed; calling
// | `end` will result in an exception being thrown.
var stderr = $foreign.process.stderr;
var platformStr = $foreign.process.platform;
var platform = Node_Platform.fromString(platformStr);
var pid = $foreign.process.pid;

// | Install a handler for a particular signal.
var onSignal = function (sig) {
    return $foreign.onSignalImpl(Data_Posix_Signal.toString(sig));
};
var mkEffect = Unsafe_Coerce.unsafeCoerce;

// | Register a callback to run as soon as the current event loop runs to
// | completion.
var nextTick = function (callback) {
    return mkEffect(function (v) {
        return $foreign.process.nextTick(callback);
    });
};

// | Get a copy of the current environment.
var getEnv = mkEffect(function (v) {
    return $foreign.process.env;
});

// | Lookup a particular environment variable.
var lookupEnv = function (k) {
    return Data_Functor.map(Effect.functorEffect)(Foreign_Object.lookup(k))(getEnv);
};

// | The absolute pathname of the `node` executable that started the
// | process.
var execPath = mkEffect(function (v) {
    return $foreign.process.execPath;
});

// | Node-specific options passed to the `node` executable. Be aware that
// | this can change over the course of the program.
var execArgv = mkEffect(function (v) {
    return $foreign.process.execArgv;
});

// | Get the current working directory of the process.
var cwd = $foreign.process.cwd;

// | Get an array containing the command line arguments. Be aware
// | that this can change over the course of the program.
var argv = mkEffect(function (v) {
    return $foreign.process.argv;
});
module.exports = {
    onSignal: onSignal,
    argv: argv,
    execArgv: execArgv,
    execPath: execPath,
    cwd: cwd,
    getEnv: getEnv,
    lookupEnv: lookupEnv,
    pid: pid,
    platform: platform,
    stdin: stdin,
    stdout: stdout,
    stderr: stderr,
    stdoutIsTTY: stdoutIsTTY,
    stderrIsTTY: stderrIsTTY,
    version: version,
    onBeforeExit: $foreign.onBeforeExit,
    onExit: $foreign.onExit,
    chdir: $foreign.chdir,
    setEnv: $foreign.setEnv,
    exit: $foreign.exit
};
