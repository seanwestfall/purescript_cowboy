// Generated by purs version 0.12.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Apply = require("../Control.Apply/index.js");
var Control_Bind = require("../Control.Bind/index.js");
var Control_Category = require("../Control.Category/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Bounded = require("../Data.Bounded/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_String = require("../Data.String/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Pattern = require("../Data.String.Pattern/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Node_Path = require("../Node.Path/index.js");
var Prelude = require("../Prelude/index.js");
var Psa_Types = require("../Psa.Types/index.js");
var $$Error = (function () {
    function $$Error() {

    };
    $$Error.value = new $$Error();
    return $$Error;
})();
var Warning = (function () {
    function Warning() {

    };
    Warning.value = new Warning();
    return Warning;
})();

// | Finds the true bounds of the source. The PureScript compiler is greedy
// | when it comes to matching whitespace at the end of an expression, so the
// | original source bounds always includes whitespace and comments.
var trimPosition = function ($copy_lines) {
    return function ($copy_pos) {
        var $tco_var_lines = $copy_lines;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(lines, pos) {
            var isPunc = Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(function (v) {
                return Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(v)(Data_String_CodePoints.codePointFromChar(" "));
            })(function (v) {
                return Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(v)(Data_String_CodePoints.codePointFromChar(","));
            });
            
            // TODO: this breaks if "--" is insidentitye a quoted string.
            // TODO: Block comments?
var trimComment = function (col) {
                return function (l) {
                    var v = Data_String_CodePoints.indexOf("--")(l);
                    if (v instanceof Data_Maybe.Just && v.value0 === 0) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (v instanceof Data_Maybe.Just && v.value0 < (col - 1 | 0)) {
                        return trimCol(v.value0 + 1 | 0)(l);
                    };
                    return new Data_Maybe.Just(col);
                };
            };
            var trimCol = function ($copy_col) {
                return function ($copy_l) {
                    var $tco_var_col = $copy_col;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(col, l) {
                        var v = Data_String_CodePoints.codePointAt(col - 2 | 0)(l);
                        if (v instanceof Data_Maybe.Just && isPunc(v.value0)) {
                            $tco_var_col = col - 1 | 0;
                            $copy_l = l;
                            return;
                        };
                        if (v instanceof Data_Maybe.Just) {
                            $tco_done = true;
                            return trimComment(col)(l);
                        };
                        $tco_done = true;
                        return Data_Maybe.Nothing.value;
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_col, $copy_l);
                    };
                    return $tco_result;
                };
            };
            var trimPos = function ($copy_v) {
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v) {
                    if (v.col <= 1) {
                        var v1 = Data_Array.index(lines)((v.row - pos.startLine | 0) - 1 | 0);
                        if (v1 instanceof Data_Maybe.Just) {
                            $copy_v = {
                                row: v.row - 1 | 0,
                                col: Data_String_CodePoints.length(v1.value0) + 1 | 0
                            };
                            return;
                        };
                        $tco_done = true;
                        return Data_Maybe.Nothing.value;
                    };
                    if (Data_Boolean.otherwise) {
                        var v1 = Data_Array.index(lines)(v.row - pos.startLine | 0);
                        if (v1 instanceof Data_Maybe.Just) {
                            var v2 = trimCol(v.col)(v1.value0);
                            if (v2 instanceof Data_Maybe.Just) {
                                $tco_done = true;
                                return new Data_Maybe.Just({
                                    row: v.row,
                                    col: v2.value0
                                });
                            };
                            if (v2 instanceof Data_Maybe.Nothing) {
                                $copy_v = {
                                    row: v.row,
                                    col: 1
                                };
                                return;
                            };
                            throw new Error("Failed pattern match at Psa.Output line 225, column 11 - line 227, column 49: " + [ v2.constructor.name ]);
                        };
                        $tco_done = true;
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match at Psa.Output line 216, column 3 - line 229, column 26: " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($copy_v);
                };
                return $tco_result;
            };
            if (lines.length === 0) {
                $tco_done = true;
                return {
                    startLine: pos.startLine,
                    startColumn: pos.startColumn,
                    endLine: pos.startLine,
                    endColumn: pos.startColumn
                };
            };
            if (lines.length === 1) {
                var v = trimCol(pos.endColumn)(lines[0]);
                if (v instanceof Data_Maybe.Just) {
                    $tco_done = true;
                    return {
                        startLine: pos.startLine,
                        startColumn: pos.startColumn,
                        endLine: pos.startLine,
                        endColumn: v.value0
                    };
                };
                if (v instanceof Data_Maybe.Nothing) {
                    $tco_done = true;
                    return {
                        startLine: pos.startLine,
                        startColumn: pos.startColumn,
                        endLine: pos.startLine,
                        endColumn: pos.startColumn
                    };
                };
                throw new Error("Failed pattern match at Psa.Output line 204, column 7 - line 206, column 81: " + [ v.constructor.name ]);
            };
            var v = trimPos({
                row: pos.endLine,
                col: pos.endColumn
            });
            if (v instanceof Data_Maybe.Just) {
                $tco_done = true;
                return {
                    startLine: pos.startLine,
                    startColumn: pos.startColumn,
                    endLine: v.value0.row,
                    endColumn: v.value0.col
                };
            };
            if (v instanceof Data_Maybe.Nothing) {
                $tco_var_lines = [  ];
                $copy_pos = pos;
                return;
            };
            throw new Error("Failed pattern match at Psa.Output line 209, column 7 - line 211, column 49: " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_lines, $copy_pos);
        };
        return $tco_result;
    };
};

// | Trims extraneous whitespace from psc error messages.
var trimMessage = (function () {
    var dedent = function (v) {
        return function (l) {
            if (l === "") {
                return {
                    lines: Data_Array.snoc(v.lines)(l),
                    indent: v.indent
                };
            };
            if (Data_Boolean.otherwise) {
                var indent$prime = Data_String_CodePoints.length(Data_String_CodePoints.takeWhile(function (v1) {
                    return Data_Eq.eq(Data_String_CodePoints.eqCodePoint)(v1)(Data_String_CodePoints.codePointFromChar(" "));
                })(l));
                var $63 = indent$prime < v.indent;
                if ($63) {
                    return {
                        lines: Data_Array.snoc(v.lines)(Data_String_CodePoints.drop(indent$prime)(l)),
                        indent: indent$prime
                    };
                };
                return {
                    lines: Data_Array.snoc(v.lines)(Data_String_CodePoints.drop(v.indent)(l)),
                    indent: v.indent
                };
            };
            throw new Error("Failed pattern match at Psa.Output line 258, column 3 - line 264, column 69: " + [ v.constructor.name, l.constructor.name ]);
        };
    };
    var collapse = function (lines) {
        return function (l) {
            var v = Data_Array.last(lines);
            if (v instanceof Data_Maybe.Just && (v.value0 === "" && l === "")) {
                return lines;
            };
            return Data_Array.snoc(lines)(l);
        };
    };
    return function ($118) {
        return (function ($119) {
            return (function ($120) {
                return Data_String_Common.trim(Data_String_Common.joinWith("\x0a")($120));
            })(Data_Foldable.foldl(Data_Foldable.foldableArray)(collapse)([  ])((function (v) {
                return v.lines;
            })($119)));
        })(Data_Foldable.foldl(Data_Foldable.foldableArray)(dedent)({
            lines: [  ],
            indent: Data_Bounded.top(Data_Bounded.boundedInt)
        })(Data_String_Common.split("\x0a")($118)));
    };
})();
var partition = function (f) {
    var go = function (v) {
        return function (x) {
            var $70 = f(x);
            if ($70) {
                return {
                    pass: Data_Array.snoc(v.pass)(x),
                    fail: v.fail
                };
            };
            return {
                pass: v.pass,
                fail: Data_Array.snoc(v.fail)(x)
            };
        };
    };
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(go)({
        pass: [  ],
        fail: [  ]
    });
};
var onTag = function (f) {
    return function (g) {
        return function (v) {
            return function (x) {
                if (v instanceof $$Error) {
                    return f(x);
                };
                if (v instanceof Warning) {
                    return g(x);
                };
                throw new Error("Failed pattern match at Psa.Output line 169, column 1 - line 169, column 64: " + [ f.constructor.name, g.constructor.name, v.constructor.name, x.constructor.name ]);
            };
        };
    };
};
var onPath = function (f) {
    return function (g) {
        return function (v) {
            return function (x) {
                if (v instanceof Psa_Types.Src) {
                    return f(x);
                };
                if (v instanceof Psa_Types.Lib) {
                    return g(x);
                };
                return x;
            };
        };
    };
};
var updateStats = function (tag) {
    return function (path) {
        return function (code) {
            return function (printed) {
                return function (s) {
                    var bump = function (v) {
                        return new Data_Tuple.Tuple((function () {
                            if (printed) {
                                return v.value0 + 1 | 0;
                            };
                            return v.value0;
                        })(), v.value1 + 1 | 0);
                    };
                    var alterStat = function (v) {
                        if (v instanceof Data_Maybe.Nothing) {
                            return new Data_Maybe.Just(bump(new Data_Tuple.Tuple(0, 0)));
                        };
                        if (v instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(bump(v.value0));
                        };
                        throw new Error("Failed pattern match at Psa.Output line 147, column 3 - line 147, column 47: " + [ v.constructor.name ]);
                    };
                    var bumpCode = Foreign_Object.alter(alterStat)(code);
                    return {
                        allWarnings: onTag(Control_Category.identity(Control_Category.categoryFn))(bumpCode)(tag)(s.allWarnings),
                        allErrors: onTag(bumpCode)(Control_Category.identity(Control_Category.categoryFn))(tag)(s.allErrors),
                        srcWarnings: onTag(Control_Category.identity(Control_Category.categoryFn))(onPath(bumpCode)(Control_Category.identity(Control_Category.categoryFn))(path))(tag)(s.srcWarnings),
                        srcErrors: onTag(onPath(bumpCode)(Control_Category.identity(Control_Category.categoryFn))(path))(Control_Category.identity(Control_Category.categoryFn))(tag)(s.srcErrors),
                        libWarnings: onTag(Control_Category.identity(Control_Category.categoryFn))(onPath(Control_Category.identity(Control_Category.categoryFn))(bumpCode)(path))(tag)(s.libWarnings),
                        libErrors: onTag(onPath(Control_Category.identity(Control_Category.categoryFn))(bumpCode)(path))(Control_Category.identity(Control_Category.categoryFn))(tag)(s.libErrors)
                    };
                };
            };
        };
    };
};
var isWarning = function (v) {
    if (v instanceof Warning) {
        return true;
    };
    return false;
};
var isSrc = function (v) {
    if (v instanceof Psa_Types.Src) {
        return true;
    };
    return false;
};
var isLib = function (v) {
    if (v instanceof Psa_Types.Lib) {
        return true;
    };
    return false;
};
var shouldShowError = function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                if (v1 instanceof $$Error) {
                    return true;
                };
                return !v.censorWarnings && (!(v.censorSrc && isSrc(v2) || v.censorLib && isLib(v2)) && ((Data_Set.isEmpty(v.filterCodes) || Data_Set.member(Data_Ord.ordString)(v3)(v.filterCodes)) && (Data_Set.isEmpty(v.censorCodes) || !Data_Set.member(Data_Ord.ordString)(v3)(v.censorCodes))));
            };
        };
    };
};
var initialStats = {
    allWarnings: Foreign_Object.empty,
    allErrors: Foreign_Object.empty,
    srcWarnings: Foreign_Object.empty,
    srcErrors: Foreign_Object.empty,
    libWarnings: Foreign_Object.empty,
    libErrors: Foreign_Object.empty
};
var errorPath = function (libDirs) {
    return function (path) {
        return function ($$short) {
            var startsWith = function (s$prime) {
                return function (s) {
                    var v = Data_String_CodePoints.indexOf(s)(s$prime);
                    if (v instanceof Data_Maybe.Just && v.value0 === 0) {
                        return true;
                    };
                    return false;
                };
            };
            var $105 = Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (dir) {
                return startsWith(path)(dir);
            })(libDirs);
            if ($105) {
                return new Psa_Types.Lib($$short);
            };
            return new Psa_Types.Src($$short);
        };
    };
};
var annotatedError = function (path) {
    return function (lines) {
        return function (error) {
            var position = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(trimPosition)(lines))(error.position);
            var source = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function (p) {
                return Data_Array.take((p.endLine - p.startLine | 0) + 1 | 0);
            })(position))(lines);
            var message = trimMessage(error.message);
            return {
                path: path,
                position: position,
                message: message,
                source: source,
                error: error
            };
        };
    };
};

// | Annotates a error/warning result set with original source lines, better
// | positions, and semantic paths (lib vs src). The callback should load the
// | requested set of lines from the absolute filename based on the tentative
// | position information.
var output = function (dictMonad) {
    return function (loadLines) {
        return function (options) {
            return function (result) {
                var pathOf = function (x) {
                    if (x.filename instanceof Data_Maybe.Just && x.filename.value0 !== "") {
                        var path = (function () {
                            if (Node_Path.isAbsolute(x.filename.value0)) {
                                return x.filename.value0;
                            };
                            if (Data_Boolean.otherwise) {
                                return Node_Path.concat([ options.cwd, x.filename.value0 ]);
                            };
                            throw new Error("Failed pattern match at Psa.Output line 85, column 11 - line 87, column 57: " + [  ]);
                        })();
                        return new Data_Tuple.Tuple(errorPath(options.libDirs)(path)(x.filename.value0), x);
                    };
                    return new Data_Tuple.Tuple(Psa_Types.Unknown.value, x);
                };
                var onError = function (tag) {
                    return function (state) {
                        return function (v) {
                            var update = function (log) {
                                var printed = !Data_Array["null"](log);
                                var tag$prime = (function () {
                                    var $111 = printed && (options.strict && isSrc(v.value0));
                                    if ($111) {
                                        return $$Error.value;
                                    };
                                    return tag;
                                })();
                                var stats = updateStats(tag$prime)(v.value0)(v.value1.errorCode)(printed)(state.stats);
                                return Control_Applicative.pure(dictMonad.Applicative0())(onTag(function (v1) {
                                    return {
                                        stats: stats,
                                        errors: Data_Semigroup.append(Data_Semigroup.semigroupArray)(state.errors)(log),
                                        warnings: v1.warnings
                                    };
                                })(function (v1) {
                                    return {
                                        stats: stats,
                                        errors: v1.errors,
                                        warnings: Data_Semigroup.append(Data_Semigroup.semigroupArray)(state.warnings)(log)
                                    };
                                })(tag$prime)(state));
                            };
                            var $112 = shouldShowError(options)(tag)(v.value0)(v.value1.errorCode);
                            if ($112) {
                                return Control_Bind.bind(dictMonad.Bind1())(Data_Maybe.fromMaybe(Control_Applicative.pure(dictMonad.Applicative0())(Data_Maybe.Nothing.value))(Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(loadLines)(v.value1.filename))(v.value1.position)))(function (v1) {
                                    return update([ annotatedError(v.value0)(v1)(v.value1) ]);
                                });
                            };
                            return update([  ]);
                        };
                    };
                };
                var result$prime = {
                    warnings: Data_Functor.map(Data_Functor.functorArray)(pathOf)(result.warnings),
                    errors: Data_Functor.map(Data_Functor.functorArray)(pathOf)(result.errors)
                };
                var initialState = {
                    warnings: [  ],
                    errors: [  ],
                    stats: initialStats
                };
                return Control_Bind.bind(dictMonad.Bind1())(Data_Array.foldM(dictMonad)(onError(Warning.value))(initialState)(result$prime.warnings))(function (v) {
                    return Control_Bind.bind(dictMonad.Bind1())(Data_Array.foldM(dictMonad)(onError($$Error.value))(v)(result$prime.errors))(function (v1) {
                        return Control_Applicative.pure(dictMonad.Applicative0())({
                            warnings: Data_Array.sortBy(Psa_Types.compareByLocation)(v1.warnings),
                            errors: Data_Array.sortBy(Psa_Types.compareByLocation)(v1.errors),
                            stats: v1.stats
                        });
                    });
                });
            };
        };
    };
};
module.exports = {
    output: output,
    annotatedError: annotatedError,
    trimPosition: trimPosition,
    trimMessage: trimMessage
};
