// Generated by purs version 0.12.0
"use strict";
var Control_Applicative = require("../Control.Applicative/index.js");
var Control_Semigroupoid = require("../Control.Semigroupoid/index.js");
var Data_Argonaut_Core = require("../Data.Argonaut.Core/index.js");
var Data_Argonaut_Decode_Class = require("../Data.Argonaut.Decode.Class/index.js");
var Data_Bifunctor = require("../Data.Bifunctor/index.js");
var Data_Either = require("../Data.Either/index.js");
var Data_Function = require("../Data.Function/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Show = require("../Data.Show/index.js");
var Foreign_Object = require("../Foreign.Object/index.js");
var Prelude = require("../Prelude/index.js");
var elaborateFailure = function (s) {
    return function (e) {
        var msg = function (m) {
            return "Failed to decode key '" + (s + ("': " + m));
        };
        return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(msg)(e);
    };
};
var getField = function (dictDecodeJson) {
    return function (o) {
        return function (s) {
            return Data_Maybe.maybe(Data_Either.Left.create("Expected field " + Data_Show.show(Data_Show.showString)(s)))(function ($2) {
                return elaborateFailure(s)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)($2));
            })(Foreign_Object.lookup(s)(o));
        };
    };
};
var getFieldOptional = function (dictDecodeJson) {
    return function (o) {
        return function (s) {
            var decode = function (json) {
                return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.Just.create)(elaborateFailure(s)(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson)(json)));
            };
            return Data_Maybe.maybe(Control_Applicative.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value))(decode)(Foreign_Object.lookup(s)(o));
        };
    };
};
var defaultField = function (parser) {
    return function ($$default) {
        return Data_Functor.map(Data_Either.functorEither)(Data_Maybe.fromMaybe($$default))(parser);
    };
};
module.exports = {
    getField: getField,
    getFieldOptional: getFieldOptional,
    defaultField: defaultField
};
